# PowerShell Commands for Running the Backend Layers

## 1. Start Backend Layers

### Terminal 1 - Layer 1 (Fast Mode):
cd backend\layer1_fast_mode
python main.py

### Terminal 2 - Layer 2 (Config Mode):
cd backend\layer2_config_mode
python main.py

### Terminal 3 - Layer 3 (Deep Config):
cd backend\layer3_deep_config
python main.py

## 2. Start Frontend

### Terminal 4 - Frontend:
cd ..
npm start

## 3. Test Backend Health

### Test each backend separately:
curl http://localhost:8001/health
curl http://localhost:8002/health
curl http://localhost:8003/health

### Or use PowerShell's Invoke-WebRequest:
Invoke-WebRequest -Uri http://localhost:8001/health
Invoke-WebRequest -Uri http://localhost:8002/health
Invoke-WebRequest -Uri http://localhost:8003/health

## 4. Quick Test Script (PowerShell)

### Create a test script:
Write-Host "Testing Layer 1..."
try { Invoke-WebRequest -Uri http://localhost:8001/health | Select-Object StatusCode } catch { Write-Host "Layer 1 not running" }

Write-Host "Testing Layer 2..."
try { Invoke-WebRequest -Uri http://localhost:8002/health | Select-Object StatusCode } catch { Write-Host "Layer 2 not running" }

Write-Host "Testing Layer 3..."
try { Invoke-WebRequest -Uri http://localhost:8003/health | Select-Object StatusCode } catch { Write-Host "Layer 3 not running" }

## 5. Alternative: Use Command Prompt

### If you prefer, open Command Prompt (cmd) instead of PowerShell:
cd backend\layer1_fast_mode && python main.py

## 6. Ports

- Frontend: 3000
- Backend Layer 1: 8001
- Backend Layer 2: 8002
- Backend Layer 3: 8003

## 7. API Documentation

- Layer 1: http://localhost:8001/docs
- Layer 2: http://localhost:8002/docs
- Layer 3: http://localhost:8003/docs

## 8. Complete Flow Test

1. Open http://localhost:3000
2. Upload a CSV file
3. Select a layer (Fast/Config/Deep)
4. Process the file
5. Search the data

## 9. Troubleshooting

### Port Already in Use:
netstat -ano | findstr :8001
netstat -ano | findstr :8002
netstat -ano | findstr :8003
taskkill /PID <PID> /F

### Import Errors:
pip install -r requirements.txt

### ChromaDB Issues:
The database will be created automatically in the chroma_db folder.
